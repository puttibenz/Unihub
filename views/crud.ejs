
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/css/style_crud.css">
    <link rel="stylesheet" href="/css/user_btn.css">
    <link rel="stylesheet" href="/css/nav.css">
    <link rel="stylesheet" href="/css/footer.css">
</head>
<body>
    <%- include('partials/nav') %>

    <div class="container">
        <header class="admin-header">
            <h1>Admin Dashboard</h1>
            <p class="muted">Manage universities, faculties, departments, and events</p>
        </header>

        <div class="tabs" role="tablist">
            <div class="tab" data-tab="universities">Universities</div>
            <div class="tab" data-tab="faculties">Faculties</div>
            <div class="tab active" data-tab="departments">Departments</div>
            <div class="tab" data-tab="events">Events</div>
        </div>

        <section class="panel" id="panel-universities" style="display:none;">
            <div class="panel-header">
                <div>
                    <h3>Universities</h3>
                    <p class="muted">Manage university information</p>
                </div>
                <button class="btn-primary" onclick="onAdd('university')">+ Add University</button>
            </div>
            <table class="admin-table">
                <thead>
                    <tr><th>Name</th><th>Location</th><th>Website</th><th>Actions</th></tr>
                </thead>
                <tbody>
                    <% const uniSample = (typeof universities !== 'undefined' && universities) ? universities : []; %>
                    <% uniSample.forEach(function(u){ %>
                        <tr>
                            <td><%= u.name || u.UniversityName || 'Unknown' %></td>
                            <td><%= u.location || u.Location || '-' %></td>
                            <td><%= u.website || u.Website || '-' %></td>
                              <td class="actions"><button class="icon-btn" data-id="<%= u.id || '' %>" onclick="onEdit('university', this.dataset.id)">✎</button><button class="icon-btn" data-id="<%= u.id || '' %>" onclick="onDelete('university', this.dataset.id)">🗑</button></td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </section>

        <section class="panel" id="panel-faculties" style="display:none;">
            <div class="panel-header">
                <div>
                    <h3>Faculties</h3>
                    <p class="muted">Manage faculty information</p>
                </div>
                <button class="btn-primary" onclick="onAdd('faculty')">+ Add Faculty</button>
            </div>
            <table class="admin-table">
                <thead>
                    <tr><th>Name</th><th>University</th><th>Actions</th></tr>
                </thead>
                <tbody>
                    <% const facSample = (typeof faculties !== 'undefined' && faculties) ? faculties : []; %>
                    <% facSample.forEach(function(f){ %>
                        <tr>
                            <td><%= f.name || f.FacultyName || 'Unknown' %></td>
                            <td><%= f.university || f.University || '-' %></td>
                              <td class="actions"><button class="icon-btn" data-id="<%= f.id || '' %>" onclick="onEdit('faculty', this.dataset.id)">✎</button><button class="icon-btn" data-id="<%= f.id || '' %>" onclick="onDelete('faculty', this.dataset.id)">🗑</button></td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </section>

        <section class="panel" id="panel-departments">
            <div class="panel-header">
                <div>
                    <h3>Departments</h3>
                    <p class="muted">Manage department information</p>
                </div>
                <button class="btn-primary" onclick="onAdd('department')">+ Add Department</button>
            </div>

            <table class="admin-table">
                <thead>
                    <tr><th>Name</th><th>Faculty</th><th>University</th><th>Actions</th></tr>
                </thead>
                <tbody>
                    <% const depSample = (typeof departments !== 'undefined' && departments) ? departments : []; %>
                    <% depSample.forEach(function(d, idx){ %>
                        <tr>
                            <td><%= d.name || d.DepartmentName || 'Unknown' %></td>
                            <td><%= d.faculty || d.Faculty || '-' %></td>
                            <td><%= d.university || d.University || '-' %></td>
                            <td class="actions">
                            <button class="icon-btn" data-id="<%= d.id != null ? d.id : idx %>" onclick="onEdit('department', this.dataset.id)">✎</button>
                            <button class="icon-btn" data-id="<%= d.id != null ? d.id : idx %>" onclick="onDelete('department', this.dataset.id)">🗑</button>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </section>

        <section class="panel" id="panel-events" style="display:none;">
            <div class="panel-header">
                <div>
                    <h3>Events</h3>
                    <p class="muted">Manage events</p>
                </div>
                <div class="panel-controls">
                    <button class="btn-primary" onclick="onAdd('event')">+ Add Event</button>
                </div>
            </div>
            <table class="admin-table">
                <thead>
                    <tr><th>Title</th><th>Date</th><th>Location</th><th>Actions</th></tr>
                </thead>
                <tbody>
                    <% const evSample = (typeof events !== 'undefined' && events) ? events : []; %>
                    <% evSample.forEach(function(e){ %>
                        <tr data-category="<%= (e.tag || e.category || '') %>">
                            <td><%= e.title || e.Title || 'Untitled' %></td>
                            <td><%= e.date || '-' %></td>
                            <td><%= e.location || '-' %></td>
                              <td class="actions"><button class="icon-btn" data-id="<%= e.id || '' %>" onclick="onEdit('event', this.dataset.id)">✎</button><button class="icon-btn" data-id="<%= e.id || '' %>" onclick="onDelete('event', this.dataset.id)">🗑</button></td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </section>
        
        

    </div>

        <!-- Modal UI (client-only) -->
        <div id="add-modal" class="hidden" aria-hidden="true">
            <div class="modal-backdrop" aria-hidden="true"></div>
            <div class="modal-wrapper" role="dialog" aria-modal="true">
                <div class="modal-box">
                    <h3 id="add-modal-title">Add</h3>
                    <form id="add-modal-form">
                    <!-- University -->
                    <div id="form-university" class="hidden">
                        <label class="form-label">ชื่อมหาวิทยาลัย</label>
                        <input id="uni-name" type="text" placeholder="ชื่อมหาวิทยาลัย" class="form-control" />
                        <label class="form-label">ที่ตั้ง</label>
                        <input id="uni-location" type="text" placeholder="เช่น กรุงเทพมหานคร" class="form-control" />
                        <label class="form-label">เว็บไซต์</label>
                        <input id="uni-website" type="url" placeholder="https://example.ac.th" class="form-control" />
                    </div>

                    <!-- Faculty -->
                    <div id="form-faculty" class="hidden">
                        <label class="form-label">มหาวิทยาลัย</label>
                        <select id="fac-university" class="form-control"></select>
                        <label class="form-label">ชื่อคณะ</label>
                        <input id="fac-name" type="text" placeholder="ชื่อคณะ" class="form-control" />
                    </div>

                    <!-- Department -->
                    <div id="form-department" class="hidden">
                        <label class="form-label">มหาวิทยาลัย</label>
                        <select id="dept-university" class="form-control"></select>
                        <label class="form-label">คณะ</label>
                        <select id="dept-faculty" class="form-control"></select>
                        <label class="form-label">ชื่อสาขา</label>
                        <input id="dept-name" type="text" placeholder="ชื่อสาขา" class="form-control" />
                    </div>

                    <!-- Event -->
                    <div id="form-event" class="hidden">
                        <label class="form-label">มหาวิทยาลัย</label>
                        <select id="event-university" class="form-control"></select>
                        <label class="form-label">คณะ</label>
                        <select id="event-faculty" class="form-control"></select>
                        <label class="form-label">สาขา</label>
                        <input id="event-major" type="text" placeholder="สาขา (ถ้ามี)" class="form-control" />
                        <label class="form-label">ประเภท (Category)</label>
                        <select id="event-category" class="form-control"></select>
                        <label class="form-label">Title</label>
                        <input id="event-title" type="text" placeholder="ชื่อกิจกรรม" class="form-control" />
                        <label class="form-label">Description</label>
                        <textarea id="event-description" rows="3" class="form-control"></textarea>
                        <label class="form-label">Location</label>
                        <input id="event-location" type="text" class="form-control" />
                        <label class="form-label">Start Time</label>
                        <input id="event-start" type="datetime-local" class="form-control" />
                        <label class="form-label">End Time</label>
                        <input id="event-end" type="datetime-local" class="form-control" />
                    </div>

                    <div class="modal-actions">
                        <button type="button" id="add-modal-cancel" class="btn-primary btn-cancel">ยกเลิก</button>
                        <button type="submit" class="btn-primary btn-submit">บันทึก</button>
                    </div>
                </form>
                    </form>
                </div>
            </div>
        </div>

    <!-- <%- include('partials/footer') %> -->

    <!-- data container (JSON embedded safely in HTML attributes) -->
    <div id="__DATA__container" class="hidden"
         data-universities='<%- JSON.stringify(typeof universities !== "undefined" ? universities : []) %>'
         data-faculties='<%- JSON.stringify(typeof faculties !== "undefined" ? faculties : []) %>'></div>

    <script>
        // parse embedded JSON from data container
        const __DATA_CONTAINER = document.getElementById('__DATA__container');
        const __UNIVERSITIES = JSON.parse(__DATA_CONTAINER?.getAttribute('data-universities') || '[]');
        const __FACULTIES = JSON.parse(__DATA_CONTAINER?.getAttribute('data-faculties') || '[]');

        // normalize server data to a consistent client shape
        const _UNIS = (__UNIVERSITIES || []).map(u => ({
            id: String(u.ID ?? u.id ?? u.UniversityID ?? u.University_ID ?? ''),
            name: String(u.name ?? u.Name ?? u.UniversityName ?? u.University ?? '').trim(),
            location: u.location ?? u.Location ?? null,
            website: u.website ?? u.Website ?? null
        }));

        const _FACS = (__FACULTIES || []).map(f => ({
            id: String(f.ID ?? f.id ?? f.FacultyID ?? f.Faculty_ID ?? ''),
            name: String(f.name ?? f.Name ?? f.FacultyName ?? f.Faculty ?? '').trim(),
            universityId: String(f.University_ID ?? f.UniversityID ?? f.universityId ?? f.university ?? '')
        }));

        // expose for backward-compat if other scripts expect them
        window.__UNIVERSITIES = _UNIS;
        window.__FACULTIES = _FACS;

        // helper to populate a select with university options
        function populateUniversitySelect(sel){
            sel.innerHTML = '<option value="">-- เลือกมหาวิทยาลัย --</option>';
            (_UNIS || []).forEach(u => {
                const opt = document.createElement('option');
                opt.value = u.id;
                opt.textContent = u.name || 'Unknown';
                sel.appendChild(opt);
            });
        }

        // populate faculty select filtered by university id
        function populateFacultySelectForUniversity(sel, universityId){
            sel.innerHTML = '<option value="">-- เลือกคณะ --</option>';
            (_FACS || []).forEach(f => {
                const include = !universityId || String(f.universityId) === String(universityId);
                if(include){
                    const opt = document.createElement('option');
                    opt.value = f.id;
                    opt.textContent = f.name || 'Unknown';
                    sel.appendChild(opt);
                }
            });
        }

        // Simple tab switching
        document.querySelectorAll('.tabs .tab').forEach(tab => {
            tab.addEventListener('click', () => {
                document.querySelectorAll('.tabs .tab').forEach(t=>t.classList.remove('active'));
                tab.classList.add('active');
                const name = tab.dataset.tab;
                document.querySelectorAll('section.panel').forEach(p=>p.style.display='none');
                const panel = document.getElementById('panel-' + name);
                if(panel) panel.style.display = '';
            });
        });

        // Modal helpers (client-only UI)
        const addModal = document.getElementById('add-modal');
        const addModalTitle = document.getElementById('add-modal-title');
        const addModalForm = document.getElementById('add-modal-form');
        const addModalCancel = document.getElementById('add-modal-cancel');
        const formUniversity = document.getElementById('form-university');
        const formFaculty = document.getElementById('form-faculty');
        const formDepartment = document.getElementById('form-department');
        const uniNameInput = document.getElementById('uni-name');
        const uniLocationInput = document.getElementById('uni-location');
        const uniWebsiteInput = document.getElementById('uni-website');
        const facUniversitySelect = document.getElementById('fac-university');
        const facNameInput = document.getElementById('fac-name');
        const deptUniversitySelect = document.getElementById('dept-university');
        const deptFacultySelect = document.getElementById('dept-faculty');
        const deptNameInput = document.getElementById('dept-name');
    // Event inputs
    const eventUniversitySelect = document.getElementById('event-university');
    const eventFacultySelect = document.getElementById('event-faculty');
    const eventCategorySelect = document.getElementById('event-category');
    const eventMajorInput = document.getElementById('event-major');
    const eventTitleInput = document.getElementById('event-title');
    const eventDescriptionInput = document.getElementById('event-description');
    const eventLocationInput = document.getElementById('event-location');
    const eventStartInput = document.getElementById('event-start');
    const eventEndInput = document.getElementById('event-end');

        // initialize selects from embedded data
        populateUniversitySelect(facUniversitySelect);
        populateUniversitySelect(deptUniversitySelect);
        populateUniversitySelect(eventUniversitySelect);
        populateFacultySelectForUniversity(eventFacultySelect, '');
        // categories (can be static or loaded from server)
        const CATEGORIES = ['OpenHouse','Academic','Social','Workshop','Seminar'];
        function populateCategorySelect(sel){
            if(!sel) return;
            sel.innerHTML = '<option value="">-- เลือกประเภท --</option>';
            CATEGORIES.forEach(c=>{ const opt = document.createElement('option'); opt.value = c; opt.textContent = c; sel.appendChild(opt); });
        }
        populateCategorySelect(eventCategorySelect);
        // populate events filter select
        const eventsFilterCategory = document.getElementById('events-filter-category');
        if(eventsFilterCategory){
            // populate only categories (no "all" option) and select the first category by default
            eventsFilterCategory.innerHTML = '';
            CATEGORIES.forEach((c, idx)=>{ const o = document.createElement('option'); o.value = c; o.textContent = c; if(idx===0) o.selected = true; eventsFilterCategory.appendChild(o); });
            // apply initial filter
            (function(){ const v = eventsFilterCategory.value; document.querySelectorAll('#panel-events tbody tr').forEach(tr=>{ const cat = tr.dataset.category || ''; tr.style.display = (v === '' || v === cat) ? '' : 'none'; }); })();
            eventsFilterCategory.addEventListener('change', ()=>{
                const v = eventsFilterCategory.value;
                document.querySelectorAll('#panel-events tbody tr').forEach(tr=>{
                    const cat = tr.dataset.category || '';
                    tr.style.display = (v === '' || v === cat) ? '' : 'none';
                });
            });
        }
        populateFacultySelectForUniversity(deptFacultySelect, '');

        // table bodies for runtime updates
        const tbodyUnis = document.querySelector('#panel-universities tbody');
        const tbodyFacs = document.querySelector('#panel-faculties tbody');
        const tbodyDeps = document.querySelector('#panel-departments tbody');

        // helper to append a university row to the universities table
        function appendUniversityRow(uni){
            const tr = document.createElement('tr');
            tr.innerHTML = `<td>${escapeHtml(uni.name || '')}</td><td>${escapeHtml(uni.location||'-')}</td><td>${escapeHtml(uni.website||'-')}</td><td class="actions"><button class="icon-btn" data-id="${uni.id||''}" onclick="onEdit('university', this.dataset.id)">✎</button><button class="icon-btn" data-id="${uni.id||''}" onclick="onDelete('university', this.dataset.id)">🗑</button></td>`;
            tbodyUnis.appendChild(tr);
        }

        // helper to append a faculty row
        function appendFacultyRow(fac){
            const tr = document.createElement('tr');
            const uniName = (_UNIS.find(u=>u.id===String(fac.universityId))||{}).name || '';
            tr.innerHTML = `<td>${escapeHtml(fac.name||'')}</td><td>${escapeHtml(uniName||'-')}</td><td class="actions"><button class="icon-btn" data-id="${fac.id||''}" onclick="onEdit('faculty', this.dataset.id)">✎</button><button class="icon-btn" data-id="${fac.id||''}" onclick="onDelete('faculty', this.dataset.id)">🗑</button></td>`;
            tbodyFacs.appendChild(tr);
        }

        // helper to append a department row
        function appendDepartmentRow(dep){
            const tr = document.createElement('tr');
            const fac = (_FACS.find(f=>f.id===String(dep.facultyId))||{});
            const uniName = (_UNIS.find(u=>u.id===String(dep.universityId))||{}).name || '';
            tr.innerHTML = `<td>${escapeHtml(dep.name||'')}</td><td>${escapeHtml(fac.name||'-')}</td><td>${escapeHtml(uniName||'-')}</td><td class="actions"><button class="icon-btn" data-id="${dep.id||''}" onclick="onEdit('department', this.dataset.id)">✎</button><button class="icon-btn" data-id="${dep.id||''}" onclick="onDelete('department', this.dataset.id)">🗑</button></td>`;
            tbodyDeps.appendChild(tr);
        }

        // small helper to avoid XSS when inserting text
        function escapeHtml(s){
            return String(s||'').replace(/[&<>\"']/g, function(m){ return ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',"'":"&#39;"})[m]; });
        }

        function onAdd(type){
            // show modal with contextual title and reveal proper form
            addModal.dataset.type = type;
            addModalTitle.textContent = (type === 'university') ? 'เพิ่มมหาวิทยาลัย' : (type === 'faculty') ? 'เพิ่มคณะ' : (type === 'department') ? 'เพิ่มสาขา' : (type === 'event') ? 'เพิ่มกิจกรรม' : 'Add';
            // hide all forms
            formUniversity.classList.add('hidden');
            formFaculty.classList.add('hidden');
            formDepartment.classList.add('hidden');
            const formEvent = document.getElementById('form-event');
            if(formEvent) formEvent.classList.add('hidden');
            // show the right one
            if(type === 'university'){
                formUniversity.classList.remove('hidden');
            } else if(type === 'faculty'){
                formFaculty.classList.remove('hidden');
            } else if(type === 'department'){
                formDepartment.classList.remove('hidden');
            } else if(type === 'event'){
                if(formEvent) formEvent.classList.remove('hidden');
                // populate selects
                populateUniversitySelect(eventUniversitySelect);
                populateFacultySelectForUniversity(eventFacultySelect, eventUniversitySelect.value || '');
            }
            // reset inputs
            uniNameInput.value = '';
            uniLocationInput.value = '';
            uniWebsiteInput.value = '';
            facNameInput.value = '';
            deptNameInput.value = '';
            // reset event inputs
            if(eventUniversitySelect) eventUniversitySelect.value = '';
            if(eventFacultySelect) eventFacultySelect.innerHTML = '<option value="">-- เลือกคณะ --</option>';
            if(eventCategorySelect) eventCategorySelect.value = '';
            if(eventMajorInput) eventMajorInput.value = '';
            if(eventTitleInput) eventTitleInput.value = '';
            if(eventDescriptionInput) eventDescriptionInput.value = '';
            if(eventLocationInput) eventLocationInput.value = '';
            if(eventStartInput) eventStartInput.value = '';
            if(eventEndInput) eventEndInput.value = '';

            // make modal visible and animate via CSS by toggling modal-open on root
            document.documentElement.classList.add('modal-open');
            addModal.classList.remove('hidden');
            addModal.setAttribute('aria-hidden', 'false');

            // focus first control after animation starts
            setTimeout(()=>{
                const first = addModal.querySelector('input, select');
                if(first) first.focus();
            }, 160);
        }

        function closeAddModal(){
            document.documentElement.classList.remove('modal-open');
            addModal.classList.add('hidden');
            addModal.dataset.type = '';
            addModal.setAttribute('aria-hidden', 'true');
        }

        addModalCancel.addEventListener('click', ()=> closeAddModal());

        // close modal when clicking backdrop
        document.addEventListener('click', (e) => {
            if(!document.documentElement.classList.contains('modal-open')) return;
            if(e.target.closest && e.target.closest('.modal-box')) return;
            if(e.target.classList && e.target.classList.contains('modal-backdrop')){
                closeAddModal();
            }
        });

        // when dept university changes, repopulate faculty select
        deptUniversitySelect.addEventListener('change', (e)=>{
            populateFacultySelectForUniversity(deptFacultySelect, e.target.value);
        });

        addModalForm.addEventListener('submit', async (e)=>{
            e.preventDefault();
            const type = addModal.dataset.type || 'item';
            try{
                if(type === 'university'){
                    const payload = { name: uniNameInput.value.trim(), location: uniLocationInput.value.trim(), website: uniWebsiteInput.value.trim() };
                    if(!payload.name) return alert('กรุณากรอกชื่อมหาวิทยาลัย');
                    const res = await fetch('/admin/universities', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
                    const data = await res.json().catch(()=>({}));
                    if(!res.ok) throw new Error(data.message || 'Server error');
                    // push to normalized arrays and append row
                    const newUni = { id: String(data.id), name: payload.name, location: payload.location, website: payload.website };
                    _UNIS.push(newUni);
                    window.__UNIVERSITIES = _UNIS;
                    populateUniversitySelect(facUniversitySelect);
                    populateUniversitySelect(deptUniversitySelect);
                    appendUniversityRow(newUni);
                    alert('เพิ่มมหาวิทยาลัยสำเร็จ');

                } else if(type === 'faculty'){
                    const uniId = facUniversitySelect.value;
                    const uniName = facUniversitySelect.selectedOptions[0]?.textContent?.trim() || '';
                    const payload = { university: uniName, name: facNameInput.value.trim() };
                    if(!payload.university || !payload.name) return alert('กรุณาเลือกมหาวิทยาลัยและกรอกชื่อคณะ');
                    const res = await fetch('/admin/faculties', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
                    const data = await res.json().catch(()=>({}));
                    if(!res.ok) throw new Error(data.message || 'Server error');
                    const newFac = { id: String(data.id), name: payload.name, universityId: uniId };
                    _FACS.push(newFac);
                    window.__FACULTIES = _FACS;
                    populateFacultySelectForUniversity(deptFacultySelect, deptUniversitySelect.value);
                    appendFacultyRow(newFac);
                    alert('เพิ่มคณะสำเร็จ');

                } else if(type === 'department'){
                    const payload = {
                        university: deptUniversitySelect.selectedOptions[0]?.textContent?.trim() || '',
                        faculty: deptFacultySelect.selectedOptions[0]?.textContent?.trim() || '',
                        name: deptNameInput.value.trim()
                    };
                    if(!payload.university || !payload.faculty || !payload.name) return alert('กรุณากรอกข้อมูลให้ครบ');
                    const res = await fetch('/admin/departments', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
                    const data = await res.json().catch(()=>({}));
                    if(!res.ok) throw new Error(data.message || 'Server error');
                    // optionally append row (we need facultyId/universityId to display correctly)
                    const deptObj = { id: String(data.id), name: payload.name, facultyId: (_FACS.find(f=>f.name===payload.faculty)||{}).id, universityId: (_UNIS.find(u=>u.name===payload.university)||{}).id };
                    appendDepartmentRow(deptObj);
                    alert('เพิ่มสาขาสำเร็จ');
                } else if(type === 'event'){
                    const payload = {
                        universityId: eventUniversitySelect.value || '',
                        university: eventUniversitySelect.selectedOptions[0]?.textContent?.trim() || '',
                        facultyId: eventFacultySelect.value || '',
                        faculty: eventFacultySelect.selectedOptions[0]?.textContent?.trim() || '',
                        major: eventMajorInput.value.trim() || '',
                        title: eventTitleInput.value.trim() || '',
                        description: eventDescriptionInput.value.trim() || '',
                        location: eventLocationInput.value.trim() || '',
                        startTime: eventStartInput.value || '',
                        endTime: eventEndInput.value || '',
                        category: eventCategorySelect?.value || ''
                    };
                    if(!payload.title) return alert('กรุณากรอกชื่อกิจกรรม');
                    // try admin endpoint first
                    let res;
                    try{
                        res = await fetch('/admin/events', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload) });
                    }catch(x){ res = null; }
                    if(res && res.ok){
                        const data = await res.json().catch(()=>({}));
                        const newEvent = { id: String(data.id || ''), title: payload.title, date: payload.startTime || '', location: payload.location || '', category: payload.category || '' };
                        appendEventRow(newEvent);
                        alert('เพิ่มกิจกรรมสำเร็จ');
                    } else {
                        // fallback: client-only append
                        const newEvent = { id: String(Date.now()), title: payload.title, date: payload.startTime || '', location: payload.location || '', category: payload.category || '' };
                        appendEventRow(newEvent);
                        alert('เพิ่มกิจกรรม (client-only)');
                    }
                } else {
                    const name = (document.getElementById('add-modal-name') || {}).value || '';
                    console.log('Add generic (UI only):', { type, name });
                }
                closeAddModal();
            }catch(err){
                console.error(err);
                alert(err.message || 'เกิดข้อผิดพลาด');
            }
        });

        // Append an event row into events table
        function appendEventRow(ev){
            const tbody = document.querySelector('#panel-events tbody');
            if(!tbody) return;
            const tr = document.createElement('tr');
            tr.innerHTML = `<td>${escapeHtml(ev.title||'')}</td><td>${escapeHtml(ev.date||'-')}</td><td>${escapeHtml(ev.location||'-')}</td><td class="actions"><button class="icon-btn" data-id="${ev.id||''}" onclick="onEdit('event', this.dataset.id)">✎</button><button class="icon-btn" data-id="${ev.id||''}" onclick="onDelete('event', this.dataset.id)">🗑</button></td>`;
            tbody.appendChild(tr);
        }

        // keep existing edit/delete placeholders
        function onEdit(type, id){
            const parsedId = id ? id : null;
            const name = prompt('Edit ' + type + ' name (id='+ parsedId +')');
            if(name) alert('Save changes for ' + type + ' id='+ parsedId + ' (implement API call)');
        }
        function onDelete(type, id){
            const parsedId = id ? id : null;
            if(confirm('Delete ' + type + ' id=' + parsedId + '?')){
                alert('Deleted (implement API call)');
            }
        }
    </script>
</body>
</html>


